{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/goldbergadam/magic-the-gathering-gnt-red-deck-eda?scriptVersionId=186651700\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"b79b1524","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-07-03T08:32:41.034704Z","iopub.status.busy":"2024-07-03T08:32:41.034136Z","iopub.status.idle":"2024-07-03T08:32:42.061491Z","shell.execute_reply":"2024-07-03T08:32:42.060236Z"},"papermill":{"duration":1.036674,"end_time":"2024-07-03T08:32:42.064044","exception":false,"start_time":"2024-07-03T08:32:41.02737","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["/kaggle/input/red-gnt-276/Red_GNT_276.csv\n"]}],"source":["#1)We import the relevant matlib and pandas libraries, etc.\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n"]},{"cell_type":"code","execution_count":2,"id":"ceacaa29","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:32:42.075022Z","iopub.status.busy":"2024-07-03T08:32:42.074487Z","iopub.status.idle":"2024-07-03T08:32:42.132035Z","shell.execute_reply":"2024-07-03T08:32:42.13097Z"},"papermill":{"duration":0.065884,"end_time":"2024-07-03T08:32:42.134414","exception":false,"start_time":"2024-07-03T08:32:42.06853","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>manaValue</th>\n","      <th>number</th>\n","      <th>power</th>\n","      <th>toughness</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>23.000000</td>\n","      <td>23.000000</td>\n","      <td>23.000000</td>\n","      <td>15.000000</td>\n","      <td>15.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2.608696</td>\n","      <td>3.130435</td>\n","      <td>99.217391</td>\n","      <td>3.066667</td>\n","      <td>2.733333</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>4.915089</td>\n","      <td>1.604096</td>\n","      <td>69.301027</td>\n","      <td>1.437591</td>\n","      <td>1.334523</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>4.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.000000</td>\n","      <td>2.000000</td>\n","      <td>41.500000</td>\n","      <td>2.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2.000000</td>\n","      <td>3.000000</td>\n","      <td>65.000000</td>\n","      <td>3.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2.000000</td>\n","      <td>4.000000</td>\n","      <td>144.500000</td>\n","      <td>4.000000</td>\n","      <td>3.500000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>25.000000</td>\n","      <td>6.000000</td>\n","      <td>300.000000</td>\n","      <td>5.000000</td>\n","      <td>5.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           count  manaValue      number      power  toughness\n","count  23.000000  23.000000   23.000000  15.000000  15.000000\n","mean    2.608696   3.130435   99.217391   3.066667   2.733333\n","std     4.915089   1.604096   69.301027   1.437591   1.334523\n","min     1.000000   0.000000    4.000000   1.000000   1.000000\n","25%     1.000000   2.000000   41.500000   2.000000   2.000000\n","50%     2.000000   3.000000   65.000000   3.000000   3.000000\n","75%     2.000000   4.000000  144.500000   4.000000   3.500000\n","max    25.000000   6.000000  300.000000   5.000000   5.000000"]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["#2)We get a numerical description of the values in this deck\n","\n","data = pd.read_csv(\"/kaggle/input/red-gnt-276/Red_GNT_276.csv\")\n","data.describe()  # Gives summary statistics of numerical columns\n"]},{"cell_type":"code","execution_count":3,"id":"eded1e8b","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:32:42.145299Z","iopub.status.busy":"2024-07-03T08:32:42.144902Z","iopub.status.idle":"2024-07-03T08:32:42.151933Z","shell.execute_reply":"2024-07-03T08:32:42.150497Z"},"papermill":{"duration":0.016082,"end_time":"2024-07-03T08:32:42.1549","exception":false,"start_time":"2024-07-03T08:32:42.138818","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Number of instances with values in 'count': 23\n"]}],"source":["#3)We count the amount of unique card names in the deck\n","\n","count_values = data['count'].notnull().sum()\n","\n","# Print the number of instances with values in 'count'\n","print(f\"Number of instances with values in 'count': {count_values}\")\n"]},{"cell_type":"code","execution_count":4,"id":"c4e841af","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:32:42.165772Z","iopub.status.busy":"2024-07-03T08:32:42.1654Z","iopub.status.idle":"2024-07-03T08:32:42.175107Z","shell.execute_reply":"2024-07-03T08:32:42.173867Z"},"papermill":{"duration":0.018052,"end_time":"2024-07-03T08:32:42.177582","exception":false,"start_time":"2024-07-03T08:32:42.15953","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Unique values in 'count': [ 1  2  3 25]\n"]}],"source":["#4)We find and print an overview of multiples count of cards from the deck\n","\n","# Find the unique values in the 'count' column\n","unique_counts = data['count'].unique()\n","\n","# Print the unique values in 'count'\n","if unique_counts.any():\n","  print(f\"Unique values in 'count': {unique_counts}\")\n","else:\n","  print(\"'count' column has no values\")\n"]},{"cell_type":"code","execution_count":5,"id":"e3e7b42c","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:32:42.188527Z","iopub.status.busy":"2024-07-03T08:32:42.18813Z","iopub.status.idle":"2024-07-03T08:32:42.203095Z","shell.execute_reply":"2024-07-03T08:32:42.201986Z"},"papermill":{"duration":0.023592,"end_time":"2024-07-03T08:32:42.205824","exception":false,"start_time":"2024-07-03T08:32:42.182232","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["    count isReprint   manaCost  manaValue                  name  number  \\\n","0       1      True     {3}{R}        4.0      Captivating Crew      38   \n","1       1      True  {3}{R}{R}        5.0  Siege-Gang Commander      42   \n","2       1       NaN  {3}{R}{R}        5.0      Demanding Dragon     135   \n","3       2       NaN  {2}{R}{R}        4.0    Goblin Trashmaster     144   \n","4       1      True  {4}{R}{R}        6.0         Shivan Dragon     300   \n","5       2       NaN     {1}{R}        2.0     Goblin Instigator     142   \n","6       1       NaN        {R}        1.0      Goblin Motivator     143   \n","7       2      True     {2}{R}        3.0           Guttersnipe     145   \n","8       1       NaN  {2}{R}{R}        4.0          Havoc Devils     146   \n","9       2       NaN     {3}{R}        4.0        Volley Veteran     168   \n","10      1      True  {3}{R}{R}        5.0     Seismic Elemental      41   \n","11      2      True        {2}        2.0       Eager Construct      51   \n","12      2      True        {3}        3.0         Howling Golem      53   \n","13      2      True        {2}        2.0      Welder Automaton      58   \n","14      1      True     {2}{R}        3.0        Act of Treason     127   \n","15      2      True     {1}{R}        2.0         Dragon Fodder      39   \n","16      2      True  {X}{R}{R}        2.0       Rolling Thunder      40   \n","17      2      True     {1}{R}        2.0      Tormenting Voice      43   \n","18      3      True        {R}        1.0                 Shock     156   \n","19      1      True     {2}{R}        3.0         Trumpet Blast     165   \n","20      2      True     {2}{R}        3.0               Bombard      37   \n","21     25      True        NaN        0.0              Mountain      65   \n","22      1       NaN  {4}{R}{R}        6.0        Goblin Goliath       4   \n","\n","    power  toughness                                               text  \\\n","0     4.0        3.0  {3}{R}: Gain control of target creature an opp...   \n","1     2.0        2.0  When Siege-Gang Commander enters the battlefie...   \n","2     5.0        5.0  Flying\\nWhen Demanding Dragon enters the battl...   \n","3     3.0        3.0  Other Goblins you control get +1/+1.\\nSacrific...   \n","4     5.0        5.0  Flying (This creature can't be blocked except ...   \n","5     1.0        1.0  When Goblin Instigator enters the battlefield,...   \n","6     1.0        1.0  {T}: Target creature gains haste until end of ...   \n","7     2.0        2.0  Whenever you cast an instant or sorcery spell,...   \n","8     4.0        3.0  Trample (This creature can deal excess combat ...   \n","9     4.0        2.0  When Volley Veteran enters the battlefield, it...   \n","10    4.0        4.0  When Seismic Elemental enters the battlefield,...   \n","11    2.0        2.0  When Eager Construct enters the battlefield, e...   \n","12    2.0        3.0  Whenever Howling Golem attacks or blocks, each...   \n","13    2.0        1.0  {3}{R}: Welder Automaton deals 1 damage to eac...   \n","14    NaN        NaN  Gain control of target creature until end of t...   \n","15    NaN        NaN         Create two 1/1 red Goblin creature tokens.   \n","16    NaN        NaN  Rolling Thunder deals X damage divided as you ...   \n","17    NaN        NaN  As an additional cost to cast this spell, disc...   \n","18    NaN        NaN                Shock deals 2 damage to any target.   \n","19    NaN        NaN   Attacking creatures get +2/+0 until end of turn.   \n","20    NaN        NaN         Bombard deals 4 damage to target creature.   \n","21    NaN        NaN                                    ({T}: Add {R}.)   \n","22    5.0        4.0  When Goblin Goliath enters the battlefield, cr...   \n","\n","                             type  \n","0         Creature — Human Pirate  \n","1               Creature — Goblin  \n","2               Creature — Dragon  \n","3       Creature — Goblin Warrior  \n","4               Creature — Dragon  \n","5         Creature — Goblin Rogue  \n","6       Creature — Goblin Warrior  \n","7        Creature — Goblin Shaman  \n","8                Creature — Devil  \n","9       Creature — Goblin Warrior  \n","10           Creature — Elemental  \n","11  Artifact Creature — Construct  \n","12      Artifact Creature — Golem  \n","13  Artifact Creature — Construct  \n","14                        Sorcery  \n","15                        Sorcery  \n","16                        Sorcery  \n","17                        Sorcery  \n","18                        Instant  \n","19                        Instant  \n","20                        Instant  \n","21          Basic Land — Mountain  \n","22       Creature — Goblin Mutant  \n","Total count (including duplicates): 60\n"]}],"source":["#5)We display our entire dataset\n","\n","# Filter rows with values in the 'count' column\n","filtered_data = data[data['count'].notnull()]\n","\n","# Print the filtered data (rows with values in 'count')\n","print(filtered_data)\n","\n","# Calculate the total count (including duplicates)\n","total_count = data['count'].sum()\n","\n","# Print the total count\n","print(f\"Total count (including duplicates): {total_count}\")\n"]},{"cell_type":"code","execution_count":null,"id":"58772db1","metadata":{"papermill":{"duration":0.004672,"end_time":"2024-07-03T08:32:42.215835","exception":false,"start_time":"2024-07-03T08:32:42.211163","status":"completed"},"tags":[]},"outputs":[],"source":[]},{"cell_type":"code","execution_count":6,"id":"543f269a","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:32:42.227791Z","iopub.status.busy":"2024-07-03T08:32:42.227429Z","iopub.status.idle":"2024-07-03T08:32:42.246849Z","shell.execute_reply":"2024-07-03T08:32:42.245219Z"},"papermill":{"duration":0.029456,"end_time":"2024-07-03T08:32:42.250605","exception":false,"start_time":"2024-07-03T08:32:42.221149","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["                    name  count\n","21              Mountain     25\n","18                 Shock      3\n","11       Eager Construct      2\n","15         Dragon Fodder      2\n","3     Goblin Trashmaster      2\n","20               Bombard      2\n","5      Goblin Instigator      2\n","7            Guttersnipe      2\n","9         Volley Veteran      2\n","17      Tormenting Voice      2\n","16       Rolling Thunder      2\n","12         Howling Golem      2\n","13      Welder Automaton      2\n","19         Trumpet Blast      1\n","0       Captivating Crew      1\n","14        Act of Treason      1\n","1   Siege-Gang Commander      1\n","10     Seismic Elemental      1\n","8           Havoc Devils      1\n","6       Goblin Motivator      1\n","4          Shivan Dragon      1\n","2       Demanding Dragon      1\n","22        Goblin Goliath      1\n"]}],"source":["#6)We simplify the display to only include card names and how many copies of each\n","\n","# Select only 'name' and 'count' columns\n","filtered_data = data[['name', 'count']].dropna(subset=['count'])  # Filter dataset\n","\n","# Sort the DataFrame by 'count' in descending order (highest count first)\n","sorted_data = filtered_data.sort_values(by='count', ascending=False)\n","\n","# Print the newly sorted DataFrame (with only 'name' and 'count' columns)\n","print(sorted_data)\n"]},{"cell_type":"code","execution_count":7,"id":"0a5ae63c","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:32:42.262388Z","iopub.status.busy":"2024-07-03T08:32:42.26198Z","iopub.status.idle":"2024-07-03T08:32:42.547187Z","shell.execute_reply":"2024-07-03T08:32:42.546104Z"},"papermill":{"duration":0.294706,"end_time":"2024-07-03T08:32:42.550451","exception":false,"start_time":"2024-07-03T08:32:42.255745","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["card type breakdown in this deck:\n"]},{"data":{"image/png":"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aF2+fFkffPCBmjZtqu3btzt9WUvS448/rkqVKmncuHHavn27/u///k8BAQEaP358tnX9/PPPKlOmjEJDQ53aFy1aJHd3d/3tb3/L0fsbPXq0xowZo9atW2vAgAHas2ePZsyYoa1bt2rDhg1ycXHJ0XJu9s4776hEiRJ66aWXlJiYqAkTJujpp5929KvKyXZt2LChvvvuOyUlJcnb2ztPdaCYMkAxkZiYaCSZLl265HieS5cuZWiLjIw04eHhTm2hoaFGklmyZIlT+5QpU4wk89VXXznaLl68aKpUqWIkmdWrV+e4lqioKHPjRzItLc1UrFjRPPHEE07TTZo0ydhsNrN//35HmyQjyWzbts3RdvDgQePm5mYeeeQRR1vv3r1NUFCQOX36tNMyu3fvbnx8fDLdHjcKDQ01HTt2zHL85MmTjSTz3XffOdU2atQox7CPj4+JiorKdj0dO3Y0oaGhGdpXr15tJJnw8PAMtV4fd+M2b9GihZFkJk6c6GhLSUkx9evXNwEBAebq1avGGGOio6ONJJOQkHDLZWZVW0JCgpFkoqOjHW3X13PmzBlH244dO0yJEiXMc88952gbNWqUkWR69erltMxHHnnElClTJsO6btasWTPTsGHDDO1+fn6mXr16t5zfGGNOnjxpXF1dTdu2bU1aWpqjferUqUaSmTVrlqMtNDTU9OjRI8MyWrRoYVq0aOEYvr79atasaVJSUhzt7733npFk/ve//znastqu182dO9dIMps3b87R+8FfB6eWUGwkJSVJkry8vHI8z419XBITE3X69Gm1aNFC+/fvV2JiotO0lSpVUmRkpFPb4sWLFRQU5PQfr4eHh/r165eXt+CkRIkSevrpp7Vo0SJduHDB0f7FF1+oSZMmqlSpktP0jRs3dnTklKS77rpLXbp00dKlS5WWliZjjBYsWKDOnTvLGKPTp087XpGRkUpMTHSc3smr6/9F31jvzXx9fbV582YdPXo0z+vp0aNHjvsnlSpVSv3793cMu7q6qn///jp58qRiYmLyXMOtHDt2TLGxserZs6f8/f0d7REREWrTpo0WL16cYZ4XXnjBafiBBx7QmTNnHL/bWTlz5oz8/PwytCclJeX487BixQpdvXpVw4YNc3SWlqS+ffvK29v7tvqWPf/8805HzR544AFJ0v79+3O8jOvv7/Tp03muA8UTQQbFxvXDzdl9id5sw4YNat26taP/Qrly5fTqq69KUqZB5mYHDx5UlSpVZLPZnNpv7L9yO5577jldvnxZCxculPTn6a2YmBg9++yzGaatWrVqhrZq1arp0qVLOnXqlE6dOqXz58/r448/Vrly5Zxezz//vKQ/O43ejuTkZEnZh8kJEyZo586dCgkJ0X333afRo0fn6gtNynxfZCU4OFienp5ObdWqVZOkXF0VlVsHDx6UlPnvQs2aNXX69GldvHjRqf2uu+5yGr7+5X3u3Llbrs9kcgGqt7d3jj8PWdXr6uqq8PBwx/i8uJ33dd3193fzZw2gjwyKDW9vbwUHB+f4Utv4+Hi1atVKNWrU0KRJkxQSEiJXV1ctXrxYkydPVnp6utP0t3OFUl7VqlVLDRs21Oeff67nnntOn3/+uVxdXfX444/nelnX388zzzyjHj16ZDpNRETEbdV7fdtXqVIly2kef/xxPfDAA1q4cKGWLVumd999V+PHj9c333yj9u3b52g9+b0vsvpyTEtLy9f13EpWl21nFlJuVKZMmUxDQY0aNRQbG+u4LD2/ZLe9MnsPeX1fN7r+/sqWLZvjefDXwBEZFCudOnVSfHy8Nm7ceMtpv//+e6WkpGjRokXq37+/OnTooNatW+fqSzI0NFTx8fEZ/iDv2bMn17Vn5bnnntOqVat07NgxzZ07Vx07dsz0NMK+ffsytO3du1ceHh6OIy9eXl5KS0tT69atM30FBATkuc7k5GQtXLhQISEhqlmzZrbTBgUFaeDAgfr222+VkJCgMmXK6O2333aMz8//uo8ePZrhyMfevXslydHZ9vr2vPnqnMyOQuS0tusdbzP7Xfj9999VtmzZDEeK8qpGjRpKSEjI0N65c2ddvnxZCxYsuOUysqr36tWrSkhIcOpI7Ofnl+mN9G7nqM2ttmtCQoJKlCjhOJoGXEeQQbHy8ssvy9PTU3369NGJEycyjI+Pj9d7770n6f//l3hjCElMTFR0dHSO19ehQwcdPXpUX3/9taPt0qVL+XrDvSeffFI2m01Dhw7V/v37s7zPzMaNG536uBw+fFjfffed2rZtq5IlS6pkyZLq1q2bFixYkOlRq1OnTuW5xsuXL+vZZ5/V2bNn9c9//jPb/9hvPmUXEBCg4OBgp0vWPT09M0yXV9euXXNcKi/9+cX80UcfqVy5co4+Rddvsnbj5eppaWmZ7sec1hYUFKT69evr008/dfrS37lzp5YtW6YOHTrk9S1l0LhxY507dy7DKboXXnhBQUFBevHFFx3h7UYnT57UW2+9JenPe7W4urrq/fffd/pMfPLJJ0pMTFTHjh0dbZUrV9amTZt09epVR9sPP/ygw4cP5/k93Gq7xsTEqHbt2vLx8cnzOlA8cWoJxUrlypU1d+5cPfHEE6pZs6bTnX1//vlnzZ8/33H/i7Zt28rV1VWdO3dW//79lZycrJkzZyogIEDHjh3L0fr69u2rqVOn6rnnnlNMTIyCgoI0Z84ceXh45Nt7KleunNq1a6f58+fL19fX6QvlRnXq1FFkZKTT5deSNGbMGMc077zzjlavXq1GjRqpb9++qlWrls6ePavt27drxYoVOnv27C3r+eOPPxx3JU5OTtauXbscd/Z98cUXnTrW3uzChQuqWLGi/va3v6levXoqXbq0VqxYoa1bt2rixImO6Ro2bKgvv/xSI0aM0L333qvSpUurc+fOOdpeNwsODtb48eN14MABVatWTV9++aViY2P18ccfOy4nrl27tu6//36NHDlSZ8+elb+/v+bNm6dr165lWF5uanv33XfVvn17NW7cWL1793Zcfu3j45Ovz5/q2LGjSpUqpRUrVjh1NPfz89PChQvVoUMH1a9f3+nOvtu3b9d//vMfNW7cWNKfv2cjR47UmDFj1K5dOz388MPas2ePpk+frnvvvdcpQPfp00dff/212rVrp8cff1zx8fH6/PPPb+uuu9lt19TUVK1du1YDBw7M8/JRjBXa9VJAAdq7d6/p27evCQsLM66ursbLy8s0bdrUfPDBB+bKlSuO6RYtWmQiIiKMm5ubCQsLM+PHjzezZs3KcCludpcdHzx40Dz88MPGw8PDlC1b1gwdOtQsWbLkti+/vtFXX31lJJl+/fplOl6SiYqKMp9//rmpWrWqsdvt5u677850/SdOnDBRUVEmJCTEuLi4mPLly5tWrVqZjz/++JY1Xr8MXZKx2WzG29vb1K5d2/Tt2zfLy2J1w+XXKSkp5u9//7upV6+e8fLyMp6enqZevXpm+vTpTvMkJyebp556yvj6+hpJjstyr1/OO3/+/Azryery69q1a5tt27aZxo0bGzc3NxMaGmqmTp2aYf74+HjTunVrY7fbTWBgoHn11VfN8uXLMywzq9oyu/za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92717t07Q3uvXr20a9eufCkKAAAgJ3IdZMqVK6fY2NgM7bGxsQoICMiPmgAAAHIkx6eWxo4dq5deekl9+/ZVv379tH//fjVp0kSStGHDBo0fP14jRowosEIBAABuluMgM2bMGL3wwgt6/fXX5eXlpYkTJ2rkyJGSpODgYI0ePVpDhgwpsEIBAABuluMgY4yRJNlsNg0fPlzDhw/XhQsXJEleXl4FUx0AAEA2cnXVks1mcxomwAAAgMKUqyBTrVq1DGHmZmfPnr2tggAAAHIqV0FmzJgx8vHxKahaAAAAciVXQaZ79+5cYg0AAIqMHN9H5lanlAAAAO60HAeZ61ctAQAAFBU5DjLp6en5flpp3bp16ty5s4KDg2Wz2fTtt986jTfG6I033lBQUJDc3d3VunVr7du3L19rAAAA1pXrRxTkp4sXL6pevXqaNm1apuMnTJig999/Xx9++KE2b94sT09PRUZG6sqVK3e4UgAAUBTl+unX+al9+/Zq3759puOMMZoyZYpee+01denSRZL02WefKTAwUN9++626d+9+J0sFAABFUKEekclOQkKCjh8/rtatWzvafHx81KhRI23cuDHL+VJSUpSUlOT0AgAAxVORDTLHjx+XJAUGBjq1BwYGOsZlZty4cfLx8XG8QkJCCrROAABQeIpskMmrkSNHKjEx0fE6fPhwYZcEAAAKSJENMuXLl5cknThxwqn9xIkTjnGZsdvt8vb2dnoBAIDiqcgGmUqVKql8+fJauXKloy0pKUmbN29W48aNC7EyAABQVBTqVUvJycmKi4tzDCckJCg2Nlb+/v666667NGzYML311luqWrWqKlWqpNdff13BwcHq2rVr4RUNAACKjEINMtu2bdODDz7oGB4xYoQkqUePHpo9e7ZefvllXbx4Uf369dP58+fVrFkzLVmyRG5uboVVMgAAKEIKNci0bNky20cf2Gw2jR07VmPHjr2DVQEAAKsosn1kAAAAboUgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAA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lStXzD/+8Q/ToEED4+PjYzw8PEz16tXNa6+9Zi5dumSMyfnl1zc7c+aMef75502ZMmWMm5ubqVOnjvnhhx8c47ds2WLatGljSpcubTw9PU1ERIR5++23HeOz61h64cIF4+HhYQYOHJg/G6IYu7mz79ChQ53Gd+nSxfTo0cMY8+ff00aNGhlvb2/j6elp7r//fqfL2jdu3GgiIiKM3W53/N09c+aM6dKliyldurQJCAgwr732Woa/ubdarzHGLFq0yFSpUsWUKlXqL3H5tc0YOkUAwF/VgQMHVLlyZW3dupXTxrAkggwA/AWlpqbqzJkzeumll5SQkMBjFGBZXLUEAH9BGzZsUFBQkLZu3ZqnPnRAUcERGQAAYFkckQEAAJZFkAEAAJZFkAEAAJZFkAEAAJZFkAFgGWFhYZoyZUphlwGgCCHIAMiz48ePa/DgwQoPD5fdbldISIg6d+6slStX3vFawsLCZLPZsnzxVGegeOJZSwDy5MCBA2ratKl8fX317rvvqm7dukpNTdXSpUsVFRWVoyd+ZyYtLU02m83xIMyc2rp1q+NBeT///LO6deumPXv2yNvbW9KtnyINwJo4IgMgTwYOHCibzaYtW7aoW7duqlatmmrXrq0RI0Zo06ZNjukmTZqkunXrytPTUyEhIRo4cKCSk5Md42fPni1fX18tWrRItWrVkt1u16FDh3Ty5El17txZ7u7uqlSpkr744ots6ylXrpzKly+v8uXLy9/fX5IUEBCgwMBANWvWTDNnznSaPjY2VjabTXFxcZIkm82mGTNmqH379nJ3d1d4eLi+/vprp3kOHz6sxx9/XL6+vvL391eXLl104MCB29mMAG4TQQZArp09e1ZLlixRVFSUPD09M4z39fV1/FyiRAm9//77+u233/Tpp59q1apVevnll52mv3TpksaPH6//+7//02+//aaAgAD17NlThw8f1urVq/X1119r+vTpOnnyZK5rtdls6tWrl6Kjo53ao6Oj1bx5c1WpUsXR9vrrr6tbt27asWOHnn76aXXv3t3xdPLU1FRFRkbKy8tL69ev14YNG1S6dGm1a9dOV69ezXVdAPJJYT6xEoA1bd682UjK01Ov58+fb8qUKeMYjo6ONpJMbGyso23Pnj1GktmyZYujbffu3UZSlk9xvtHq1audngL+xx9/mJIlS5rNmzcbY4y5evWqKVu2rJk9e7ZjHknmhRdecFpOo0aNzIABA4wxxsyZM8dUr17dpKenO8anpKQYd3d3s3Tp0pxvAAD5ij4yAHLN5OLJJitWrNC4ceP0+++/KykpSdeuXdOVK1d06dIleXh4SJJcXV0VERHhmGf37t0qVaqUGjZs6GirUaOG05Ge3AgODlbHjh01a9Ys3Xffffr++++VkpKixx57zGm6xo0bZxiOjY2VJO3YsUNxcXHy8vJymubKlSuKj4/PU10Abh+nlgDkWtWqVWWz2W7ZoffAgQPq1KmTIiIitGDBAsXExGjatGmS5HQ6xt3dXTabrUBr7tOnj+bNm6fLly8rOjpaTzzxhCNI5URycrIaNmyo2NhYp9fevXv11FNPFWDlALJDkAGQa/7+/oqMjNS0adN08eLFDOPPnz8vSYqJiVF6eromTpyo+++/X9WqVdPRo0dvufwaNWro2rVriomJcbTt2bPHsdy86NChgzw9PTVjxgwtWbJEvXr1yjDNjZ2Urw/XrFlTktSgQQPt27dPAQEBqlKlitPLx8cnz3UBuD0EGQB5Mm3aNKWlpem+++7TggULtG/fPu3evVvvv/++4xRNlSpVlJqaqg8++ED79+/XnDlz9OGHH95y2dWrV1e7du3Uv39/bd68WTExMerTp89tXUJdsmRJ9ezZUyNHjlTVqlUznEaSpPnz52vWrFnau3evRo0apS1btmjQoEGSpKefflply5ZVly5dtH79eiUkJGjNmjUaMmSIjhw5kue6ANweggyAPAkPD9f27dv14IMP6sUXX1SdOnXUpk0brVy5UjNmzJAk1atXT5MmTdL48eNVp04dffHFFxo3blyOlh8dHa3g4GC1aNFCjz76qPr166eAgIDbqrl37966evWqnn/++UzHjxkzRvPmzVNERIQ+++wz/ec//1GtWrUkSR4eHlq3bp3uuusuPfroo6pZs6Z69+6tK1euOO5VA+DOs5nc9NoDAAtbv369WrVqpcOHDyswMNBpnM1m08KFC9W1a9fCKQ5AnnDVEoBiLyUlRadOndLo0aP12GOPZQgxAKyLU0sAir3//Oc/Cg0N1fnz5zVhwoTCLgdAPuLUEgAAsCyOyAAAAMsiyAAAAMsiyAAAAMsiyAAAAMsiyAAAAMsiyAAAAMsiyAAAAMsiyAAAAMsiyAAAAMv6f4nP7Na7DfUpAAAAAElFTkSuQmCC","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["                    name  count  cardType\n","0       Captivating Crew      1  Creature\n","1   Siege-Gang Commander      1  Creature\n","2       Demanding Dragon      1  Creature\n","3     Goblin Trashmaster      2  Creature\n","4          Shivan Dragon      1  Creature\n","5      Goblin Instigator      2  Creature\n","6       Goblin Motivator      1  Creature\n","7            Guttersnipe      2  Creature\n","8           Havoc Devils      1  Creature\n","9         Volley Veteran      2  Creature\n","10     Seismic Elemental      1  Creature\n","11       Eager Construct      2  Creature\n","12         Howling Golem      2  Creature\n","13      Welder Automaton      2  Creature\n","14        Act of Treason      1   Sorcery\n","15         Dragon Fodder      2   Sorcery\n","16       Rolling Thunder      2   Sorcery\n","17      Tormenting Voice      2   Sorcery\n","18                 Shock      3   Instant\n","19         Trumpet Blast      1   Instant\n","20               Bombard      2   Instant\n","21              Mountain     25      Land\n","22        Goblin Goliath      1  Creature\n","----------\n","[25 22  7  6]\n","----------\n","cardType\n","Creature    22\n","Instant      6\n","Land        25\n","Sorcery      7\n","Name: count, dtype: int64\n"]}],"source":["#7)We simplify the card types, create a plot showing their distribution, and a refreshed data view scheme with only names and card types\n","\n","# Define a function to categorize card types\n","def categorize_card_type(row):\n","  card_type = row['type']\n","  if card_type in ['Sorcery', 'Instant']:\n","    return card_type\n","  elif card_type == 'Basic Land — Mountain':\n","    return 'Land'\n","  else:\n","    return 'Creature'\n","\n","# Create a new 'cardType' column based on type\n","data['cardType'] = data.apply(categorize_card_type, axis=1)\n","\n","# Create new columns for type counts and calculate totals\n","type_counts = data.groupby('cardType')['count'].sum()\n","\n","# Prepare data for the graph\n","type_counts_sorted = type_counts.sort_values(ascending=False)\n","card_types = type_counts_sorted.index.to_numpy()\n","type_counts_values = type_counts_sorted.to_numpy()\n","\n","# Create the graph\n","import matplotlib.pyplot as plt\n","\n","print(\"card type breakdown in this deck:\")\n","\n","plt.bar(card_types, type_counts_values)\n","plt.xlabel('Card Type')\n","plt.ylabel('Total Count')\n","plt.title('Card Type Distribution (Count)')\n","plt.show()\n","\n","# Re-filter our data set with only 'name', 'count', and 'cardType' columns\n","filtered_data = data[['name', 'count', 'cardType']].dropna(subset=['count'])  # Filter dataset\n","print(filtered_data)\n","print(\"----------\")\n","\n","# Show our graph in text form\n","print(type_counts_values)\n","print(\"----------\")\n","print(type_counts)\n"]},{"cell_type":"code","execution_count":8,"id":"1dd32704","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:32:42.563269Z","iopub.status.busy":"2024-07-03T08:32:42.562441Z","iopub.status.idle":"2024-07-03T08:32:42.569234Z","shell.execute_reply":"2024-07-03T08:32:42.568073Z"},"papermill":{"duration":0.01607,"end_time":"2024-07-03T08:32:42.57195","exception":false,"start_time":"2024-07-03T08:32:42.55588","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Unique Toughness Values:\n","[ 3.  2.  5.  1.  4. nan]\n"]}],"source":["#8)We display all the unique toughness values to see a survey of the cards' toughnesses (if they're creatures)\n","\n","# Get all unique toughness values\n","unique_toughness_values = data['toughness'].unique()\n","\n","# Print the unique toughness values\n","if unique_toughness_values.any():\n","  print(\"Unique Toughness Values:\")\n","  print(unique_toughness_values)\n","else:\n","  print(\"'toughness' column has no values\")\n"]},{"cell_type":"code","execution_count":9,"id":"c8027bd1","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:32:42.584326Z","iopub.status.busy":"2024-07-03T08:32:42.583967Z","iopub.status.idle":"2024-07-03T08:32:42.730927Z","shell.execute_reply":"2024-07-03T08:32:42.729768Z"},"papermill":{"duration":0.156349,"end_time":"2024-07-03T08:32:42.733803","exception":false,"start_time":"2024-07-03T08:32:42.577454","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["#9)We create a pie chart showcasing the toughness value and how each value represents the overall deck's tankiness\n","\n","# Filter for creature cards\n","creature_data = data[data['cardType'] == 'Creature']\n","\n","# Get all unique toughness values within creature cards\n","unique_toughness_values = creature_data['toughness'].unique()\n","\n","# Create a dictionary to store toughness counts\n","toughness_counts = {}\n","for toughness in unique_toughness_values:\n","  # Filter creature data with this toughness\n","  filtered_data = creature_data[creature_data['toughness'] == toughness]\n","  # Count occurrences of this toughness value\n","  toughness_counts[toughness] = filtered_data['toughness'].count()\n","\n","# Otherwise, check if there aren't any toughness counts\n","if not toughness_counts:\n","  print(\"No unique toughness values found for creatures\")\n","else:\n","  # Prepare data for the pie chart\n","  toughness_labels = list(toughness_counts.keys())\n","  creature_counts = list(toughness_counts.values())\n","\n","  # Create the pie chart\n","  import matplotlib.pyplot as plt\n","\n","  plt.pie(creature_counts, labels=toughness_labels, autopct='%1.1f%%')\n","  plt.title('Creature Count Distribution by Toughness')\n","  plt.show()\n"]},{"cell_type":"code","execution_count":10,"id":"6a9db7d6","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:32:42.750221Z","iopub.status.busy":"2024-07-03T08:32:42.749802Z","iopub.status.idle":"2024-07-03T08:32:42.760215Z","shell.execute_reply":"2024-07-03T08:32:42.759102Z"},"papermill":{"duration":0.021574,"end_time":"2024-07-03T08:32:42.762521","exception":false,"start_time":"2024-07-03T08:32:42.740947","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Goblin Goliath = 6.0\n","Shivan Dragon = 6.0\n","Demanding Dragon = 5.0\n","Siege-Gang Commander = 5.0\n","Seismic Elemental = 5.0\n"]}],"source":["#10)We print the top 5 highest mana values\n","\n","# Sort by 'manaValue' descending (highest first) and select top 5 rows\n","top_5_highest_mana = data.sort_values(by='manaValue', ascending=False).head(5)\n","\n","# Loop through the top 5\n","for index, row in top_5_highest_mana.iterrows():\n","  card_name = row['name']\n","  mana_value = row['manaValue']\n","  # Print the name and mana value in the desired format\n","  print(f\"{card_name} = {mana_value}\")\n"]},{"cell_type":"code","execution_count":11,"id":"21f2c4b0","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:32:42.777524Z","iopub.status.busy":"2024-07-03T08:32:42.776779Z","iopub.status.idle":"2024-07-03T08:32:42.785406Z","shell.execute_reply":"2024-07-03T08:32:42.784283Z"},"papermill":{"duration":0.019293,"end_time":"2024-07-03T08:32:42.788485","exception":false,"start_time":"2024-07-03T08:32:42.769192","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Mountain = 0.0\n","Shock = 1.0\n","Goblin Motivator = 1.0\n","Eager Construct = 2.0\n","Tormenting Voice = 2.0\n","Goblin Instigator = 2.0\n","Rolling Thunder = 2.0\n","Dragon Fodder = 2.0\n","Welder Automaton = 2.0\n","Bombard = 3.0\n"]}],"source":["#11)We print the top 10 *lowest* mana value cards\n","\n","# Sort by 'manaValue' ascending (lowest first) and select top 10 rows\n","top_ten_lowest_mana = data.sort_values(by='manaValue', ascending=True).head(10) # For GNT red deck, expecting until one 3-costed card)\n","\n","# Loop through the top 10\n","for index, row in top_ten_lowest_mana.iterrows():\n","  card_name = row['name']\n","  mana_value = row['manaValue']\n","  # Print the name and mana value in the desired format\n","  print(f\"{card_name} = {mana_value}\")\n"]},{"cell_type":"code","execution_count":12,"id":"3b4e0472","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:32:42.803022Z","iopub.status.busy":"2024-07-03T08:32:42.802623Z","iopub.status.idle":"2024-07-03T08:32:43.070346Z","shell.execute_reply":"2024-07-03T08:32:43.068997Z"},"papermill":{"duration":0.280012,"end_time":"2024-07-03T08:32:43.074738","exception":false,"start_time":"2024-07-03T08:32:42.794726","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["#12)We make a scatter plot to see the power-to-toughness ratio of the cards in this deck\n","#--This should show us how the spread of and general overlook at creatures' offensive and defensive capabilities\n","\n","# Filter for creature cards (assuming 'cardType' is the card type column)\n","creature_data = data[data['cardType'] == 'Creature']\n","\n","# Prepare data for the scatter plot (round power and toughness)\n","creature_power = creature_data['power'].astype(int).to_numpy()\n","creature_toughness = creature_data['toughness'].astype(int).to_numpy()\n","\n","# Sort together by power and toughness (primary and secondary sort)\n","sorted_data = np.array([creature_power, creature_toughness, creature_data['name']]).T\n","sorted_data = sorted_data[sorted_data[:, 0].argsort(kind='mergesort')]  # Stable sort\n","sorted_data = sorted_data[sorted_data[:, 1].argsort(kind='mergesort')]  # Secondary sort\n","\n","creature_power = sorted_data[:, 0]\n","creature_toughness = sorted_data[:, 1]\n","creature_names = sorted_data[:, 2]\n","\n","# Import our plotting library\n","import matplotlib.pyplot as plt\n","\n","# Create the scatter plot\n","fig, ax = plt.subplots()\n","p = ax.scatter(creature_power, creature_toughness)\n","\n","# Set labels and title with integer formatting\n","plt.xlabel('Power (Integer)')\n","plt.ylabel('Toughness (Integer)')\n","plt.title('Creature Power vs. Toughness')\n","\n","# Keep track of previous data point for label placement\n","prev_power = None\n","prev_toughness = None\n","label_offset = 0.1  # Vertical offset for labels\n","\n","for i, (name, power, toughness) in enumerate(zip(creature_names, creature_power, creature_toughness)):\n","  # Check if current point has same power and toughness as previous\n","  if prev_power == power and prev_toughness == toughness:\n","    label_offset += 0.1  # Increase offset for consecutive labels\n","  else:\n","    label_offset = 0.1  # Reset offset for new group\n","\n","  # Place text label with adjusted offset\n","  plt.text(power, toughness + label_offset, name, ha='center', va='bottom', fontsize=8)\n","\n","  # Update previous values for comparison\n","  prev_power = power\n","  prev_toughness = toughness\n","\n","# Set whole number ticks on both axes\n","plt.xticks(range(min(creature_power), max(creature_power) + 1))  # Include max value\n","plt.yticks(range(min(creature_toughness), max(creature_toughness) + 1))\n","\n","# Adjust plot layout to avoid overlapping text labels\n","plt.tight_layout()\n","\n","# Show the plot\n","plt.show()\n","\n","#As we can see, the power-to-toughness progression is nearly linear."]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":5254881,"sourceId":8749474,"sourceType":"datasetVersion"},{"datasetId":5295819,"sourceId":8805485,"sourceType":"datasetVersion"}],"dockerImageVersionId":30732,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":5.517347,"end_time":"2024-07-03T08:32:43.613865","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-07-03T08:32:38.096518","version":"2.5.0"}},"nbformat":4,"nbformat_minor":5}