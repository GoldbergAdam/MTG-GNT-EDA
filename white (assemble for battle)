{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/goldbergadam/magic-the-gathering-gnt-white-deck-eda?scriptVersionId=186651965\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"3a3cb278","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-07-03T08:34:49.879507Z","iopub.status.busy":"2024-07-03T08:34:49.879054Z","iopub.status.idle":"2024-07-03T08:34:50.996075Z","shell.execute_reply":"2024-07-03T08:34:50.994564Z"},"papermill":{"duration":1.127777,"end_time":"2024-07-03T08:34:50.999116","exception":false,"start_time":"2024-07-03T08:34:49.871339","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["/kaggle/input/white-gnt-csv/White_GNT.csv\n"]}],"source":["#1)We import the relevant matlib and pandas libraries, etc.\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n"]},{"cell_type":"code","execution_count":2,"id":"67bbad7b","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:34:51.015305Z","iopub.status.busy":"2024-07-03T08:34:51.014633Z","iopub.status.idle":"2024-07-03T08:34:51.090939Z","shell.execute_reply":"2024-07-03T08:34:51.089731Z"},"papermill":{"duration":0.086517,"end_time":"2024-07-03T08:34:51.093635","exception":false,"start_time":"2024-07-03T08:34:51.007118","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["name: Forest, count: 1, manaCost: None, convertedManaCost: None, types: Land\n","name: Giant Growth, count: 2, manaCost: {G}, convertedManaCost: 1, types: Instant\n","name: Swamp, count: 3, manaCost: None, convertedManaCost: None, types: Land\n","name: Plains, count: 4, manaCost: None, convertedManaCost: None, types: Land\n","MTG cards saved to mtg_cards.csv\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>manaValue</th>\n","      <th>number</th>\n","      <th>power</th>\n","      <th>toughness</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>25.000000</td>\n","      <td>24.000000</td>\n","      <td>24.000000</td>\n","      <td>15.000000</td>\n","      <td>15.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>4.800000</td>\n","      <td>3.583333</td>\n","      <td>17.458333</td>\n","      <td>2.400000</td>\n","      <td>2.933333</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>12.433155</td>\n","      <td>1.348644</td>\n","      <td>12.890776</td>\n","      <td>0.910259</td>\n","      <td>0.798809</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>9.750000</td>\n","      <td>2.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2.000000</td>\n","      <td>4.000000</td>\n","      <td>13.500000</td>\n","      <td>2.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2.000000</td>\n","      <td>4.250000</td>\n","      <td>21.250000</td>\n","      <td>3.000000</td>\n","      <td>3.500000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>60.000000</td>\n","      <td>6.000000</td>\n","      <td>59.000000</td>\n","      <td>4.000000</td>\n","      <td>4.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           count  manaValue     number      power  toughness\n","count  25.000000  24.000000  24.000000  15.000000  15.000000\n","mean    4.800000   3.583333  17.458333   2.400000   2.933333\n","std    12.433155   1.348644  12.890776   0.910259   0.798809\n","min     1.000000   0.000000   1.000000   1.000000   2.000000\n","25%     1.000000   3.000000   9.750000   2.000000   2.000000\n","50%     2.000000   4.000000  13.500000   2.000000   3.000000\n","75%     2.000000   4.250000  21.250000   3.000000   3.500000\n","max    60.000000   6.000000  59.000000   4.000000   4.000000"]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["#2)We get a numerical description of the values in this deck\n","\n","data = pd.read_csv(\"/kaggle/input/white-gnt-csv/White_GNT.csv\")\n","\n","import json\n","\n","# Sample card data (assuming a list of dictionaries)\n","card_data = [\n","    {\"name\": \"Forest\", \"count\": 1, \"types\": [\"Land\"]},\n","    {\"name\": \"Giant Growth\", \"count\": 2, \"manaCost\": \"{G}\", \"convertedManaCost\": 1, \"types\": [\"Instant\"]},\n","    {\"name\": \"Swamp\", \"count\": 3, \"types\": [\"Land\"]},\n","    # Card without 'manaCost' key\n","    {\"name\": \"Plains\", \"count\": 4, \"types\": [\"Land\"]},\n","]\n","\n","# Loop through each card\n","for card in card_data:\n","  name = card.get(\"name\")  # Use get() to avoid KeyError\n","  count = card.get(\"count\")\n","  mana_cost = card.get(\"manaCost\")  # Use get() to avoid KeyError\n","  converted_mana_cost = card.get(\"convertedManaCost\")\n","  types = \", \".join(card.get(\"types\", []))  # Use get() with default []\n","\n","  # Print the card data (for demonstration purposes)\n","  print(f\"name: {name}, count: {count}, manaCost: {mana_cost}, convertedManaCost: {converted_mana_cost}, types: {types}\")\n","\n","# Open the CSV file for writing within the with open block\n","with open(\"mtg_cards.csv\", \"w\") as csvfile:\n","  # Write the header row\n","  csvfile.write(\"name,count,manaCost,convertedManaCost,type\\n\")\n","\n","  # Loop through each card again and write to CSV\n","  for card in card_data:\n","    name = card.get(\"name\")  # Use get() to avoid KeyError\n","    count = card.get(\"count\")\n","    mana_cost = card.get(\"manaCost\")  # Use get() to avoid KeyError\n","    converted_mana_cost = card.get(\"convertedManaCost\")\n","    types = \", \".join(card.get(\"types\", []))  # Use get() with default []\n","\n","    # Write the card data to CSV\n","    csvfile.write(f\"{name},{count},{mana_cost},{converted_mana_cost},{types}\\n\")\n","\n","print(\"MTG cards saved to mtg_cards.csv\")\n","\n","data.describe()  # Gives summary statistics of numerical columns\n"]},{"cell_type":"code","execution_count":3,"id":"f3c281eb","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:34:51.107669Z","iopub.status.busy":"2024-07-03T08:34:51.107281Z","iopub.status.idle":"2024-07-03T08:34:51.115432Z","shell.execute_reply":"2024-07-03T08:34:51.113281Z"},"papermill":{"duration":0.018938,"end_time":"2024-07-03T08:34:51.118763","exception":false,"start_time":"2024-07-03T08:34:51.099825","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Number of instances with values in 'count': 25\n"]}],"source":["#3)We count the amount of unique card names in the deck\n","\n","count_values = data['count'].notnull().sum()\n","\n","# Print the number of instances with values in 'count'\n","print(f\"Number of instances with values in 'count': {count_values}\")\n"]},{"cell_type":"code","execution_count":4,"id":"c9189175","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:34:51.133264Z","iopub.status.busy":"2024-07-03T08:34:51.132859Z","iopub.status.idle":"2024-07-03T08:34:51.1421Z","shell.execute_reply":"2024-07-03T08:34:51.14061Z"},"papermill":{"duration":0.019759,"end_time":"2024-07-03T08:34:51.144963","exception":false,"start_time":"2024-07-03T08:34:51.125204","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Unique values in 'count': [ 1. nan  2.  3. 25. 60.]\n"]}],"source":["#4)We find and print an overview of multiples count of cards from the deck\n","\n","# Find the unique values in the 'count' column\n","unique_counts = data['count'].unique()\n","\n","# Print the unique values in 'count'\n","if unique_counts.any():\n","  print(f\"Unique values in 'count': {unique_counts}\")\n","else:\n","  print(\"'count' column has no values\")\n"]},{"cell_type":"code","execution_count":5,"id":"b1ddb03c","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:34:51.159921Z","iopub.status.busy":"2024-07-03T08:34:51.159486Z","iopub.status.idle":"2024-07-03T08:34:51.18587Z","shell.execute_reply":"2024-07-03T08:34:51.184745Z"},"papermill":{"duration":0.038013,"end_time":"2024-07-03T08:34:51.189261","exception":false,"start_time":"2024-07-03T08:34:51.151248","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["     count                                         flavorText     manaCost  \\\n","0      1.0  \"Some aspire to climb the mountain of Honor. T...  {W},{W},{W}   \n","3      1.0  \"In these halls there is no pass or fail. Your...      {2},{W}   \n","18     1.0  \"Defeat is no reason for retreat. It is a sign...      {3},{W}   \n","28     2.0     \"These storied halls are under my protection.\"      {3},{W}   \n","38     2.0           \"Our duty does not stop at our borders.\"      {3},{W}   \n","48     3.0                                                NaN      {2},{W}   \n","58     2.0  A pegasus chooses its rider, bearing the worth...      {2},{W}   \n","68     1.0                                                NaN  {1},{W},{W}   \n","73     1.0  \"Undefeated in battle, she is the shining futu...  {1},{W},{W}   \n","75     2.0       Rest sometimes requires the right prompting.          {W}   \n","78     1.0  \"Our enemies will soon discover that we are no...      {3},{W}   \n","82     2.0  The unicorns of Sursi are a manifestation of S...      {1},{W}   \n","85     2.0  The angel remembers her past lives like dreams...  {3},{W},{W}   \n","88     1.0  The remnants of Innistrad's corrupted angelic ...  {4},{W},{W}   \n","91     1.0  In their final moments, the demons gazed upon ...  {3},{W},{W}   \n","101    2.0  Benalish citizens born under the same constell...      {3},{W}   \n","103    2.0  Vampires know blood and the systems that carry...      {4},{W}   \n","105    1.0  \"For the lands you have lost and the beauty th...  {2},{W},{W}   \n","116    1.0  \"We pray to Avacyn on high.\\nOn snow-white win...  {1},{W},{W}   \n","121    1.0                    Law protects but also contains.      {3},{W}   \n","131    2.0                                                NaN      {4},{W}   \n","141    2.0  \"Your part in this fight is done, vampire. Get...      {2},{W}   \n","144   25.0                                                NaN          NaN   \n","147    1.0                                                NaN  {3},{W},{W}   \n","148   60.0                                                NaN          NaN   \n","\n","     manaValue                name  number  power    rarity  \\\n","0          3.0    Benalish Marshal     8.0    3.0      rare   \n","3          3.0  Mentor of the Meek    27.0    2.0      rare   \n","18         4.0      Valiant Knight    42.0    3.0      rare   \n","28         4.0      Dwarven Priest    11.0    2.0    common   \n","38         4.0     Gallant Cavalry    12.0    2.0    common   \n","48         3.0      Militia Bugler    29.0    2.0  uncommon   \n","58         3.0     Pegasus Courser    32.0    1.0    common   \n","68         3.0    Aerial Responder     6.0    2.0  uncommon   \n","73         3.0   Everdawn Champion    11.0    2.0  uncommon   \n","75         1.0          Fan Bearer    12.0    1.0    common   \n","78         4.0   Inspiring Captain    14.0    3.0    common   \n","82         2.0        Mesa Unicorn    15.0    2.0    common   \n","85         5.0         Serra Angel    16.0    4.0  uncommon   \n","88         6.0    Subjugator Angel    17.0    4.0  uncommon   \n","91         5.0      Cleansing Nova     9.0    NaN      rare   \n","101        4.0    Call the Cavalry    10.0    NaN    common   \n","103        5.0     Bright Reprisal     9.0    NaN  uncommon   \n","105        4.0     Inspired Charge    13.0    NaN    common   \n","116        3.0     Always Watching     7.0    NaN      rare   \n","121        4.0  Hieromancer's Cage    14.0    NaN  uncommon   \n","131        5.0      Knightly Valor    20.0    NaN  uncommon   \n","141        3.0      Luminous Bonds    25.0    NaN    common   \n","144        0.0              Plains    59.0    NaN    common   \n","147        5.0      Militant Angel     1.0    3.0    mythic   \n","148        NaN                 NaN     NaN    NaN       NaN   \n","\n","                                         rulings__text  \\\n","0    Because damage remains marked on a creature un...   \n","3    Apply power bonuses from counters the creature...   \n","18   Because damage remains marked on a creature un...   \n","28   The number of creatures you control is counted...   \n","38                                                 NaN   \n","48                                                 NaN   \n","58                                                 NaN   \n","68                                                 NaN   \n","73   Combat damage can be assigned to Everdawn Cham...   \n","75                                                 NaN   \n","78   The set of creatures affected by Inspiring Cap...   \n","82                                                 NaN   \n","85                                                 NaN   \n","88                                                 NaN   \n","91                                                 NaN   \n","101                                                NaN   \n","103  If the target creature is an illegal target by...   \n","105  The set of creatures affected by Inspired Char...   \n","116                                                NaN   \n","121  Auras attached to the exiled permanent will be...   \n","131  If the creature this Aura would enchant is an ...   \n","141                                                NaN   \n","144                                                NaN   \n","147                                                NaN   \n","148                                                NaN   \n","\n","                                                  text  toughness  \\\n","0               Other creatures you control get +1/+1.        3.0   \n","3    Whenever another creature with power 2 or less...        2.0   \n","18   Other Knights you control get +1/+1.\\n{3},{W},...        4.0   \n","28   When Dwarven Priest enters the battlefield, yo...        4.0   \n","38   Vigilance (Attacking doesn't cause this creatu...        2.0   \n","48   Vigilance (Attacking doesn't cause this creatu...        3.0   \n","58   Flying\\nWhenever Pegasus Courser attacks, anot...        3.0   \n","68                         Flying, vigilance, lifelink        3.0   \n","73   Prevent all combat damage that would be dealt ...        2.0   \n","75                      {2}, {T}: Tap target creature.        2.0   \n","78   When Inspiring Captain enters the battlefield,...        3.0   \n","82                                            Lifelink        2.0   \n","85                                   Flying, vigilance        4.0   \n","88   Flying\\nWhen Subjugator Angel enters the battl...        3.0   \n","91   Choose one —\\n• Destroy all creatures.\\n• Dest...        NaN   \n","101  Create two 2/2 white Knight creature tokens wi...        NaN   \n","103   Destroy target attacking creature.\\nDraw a card.        NaN   \n","105  Creatures you control get +2/+1 until end of t...        NaN   \n","116  Nontoken creatures you control get +1/+1 and h...        NaN   \n","121  When Hieromancer's Cage enters the battlefield...        NaN   \n","131  Enchant creature\\nWhen Knightly Valor enters t...        NaN   \n","141  Enchant creature\\nEnchanted creature can't att...        NaN   \n","144                                    ({T}: Add {W}.)        NaN   \n","147  Flying, lifelink\\nWhen Militant Angel enters t...        4.0   \n","148                                                NaN        NaN   \n","\n","                         type  \n","0     Creature — Human Knight  \n","3    Creature — Human Soldier  \n","18    Creature — Human Knight  \n","28    Creature — Dwarf Cleric  \n","38    Creature — Human Knight  \n","48   Creature — Human Soldier  \n","58         Creature — Pegasus  \n","68   Creature — Dwarf Soldier  \n","73   Creature — Human Soldier  \n","75          Creature — Zombie  \n","78    Creature — Human Knight  \n","82         Creature — Unicorn  \n","85           Creature — Angel  \n","88           Creature — Angel  \n","91                    Sorcery  \n","101                   Sorcery  \n","103                   Instant  \n","105                   Instant  \n","116               Enchantment  \n","121               Enchantment  \n","131        Enchantment — Aura  \n","141        Enchantment — Aura  \n","144       Basic Land — Plains  \n","147          Creature — Angel  \n","148                       NaN  \n","Total count (including duplicates): 120.0\n"]}],"source":["#5)We display our entire dataset\n","\n","# Filter rows with values in the 'count' column\n","filtered_data = data[data['count'].notnull()]\n","\n","# Print the filtered data (rows with values in 'count')\n","print(filtered_data)\n","\n","# Calculate the total count (including duplicates)\n","total_count = data['count'].sum()\n","\n","# Print the total count\n","print(f\"Total count (including duplicates): {total_count}\")\n"]},{"cell_type":"code","execution_count":null,"id":"56267651","metadata":{"papermill":{"duration":0.007041,"end_time":"2024-07-03T08:34:51.203592","exception":false,"start_time":"2024-07-03T08:34:51.196551","status":"completed"},"tags":[]},"outputs":[],"source":[]},{"cell_type":"code","execution_count":6,"id":"99077001","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:34:51.218634Z","iopub.status.busy":"2024-07-03T08:34:51.218228Z","iopub.status.idle":"2024-07-03T08:34:51.238277Z","shell.execute_reply":"2024-07-03T08:34:51.23717Z"},"papermill":{"duration":0.030995,"end_time":"2024-07-03T08:34:51.241262","exception":false,"start_time":"2024-07-03T08:34:51.210267","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["                   name  count\n","148                 NaN   60.0\n","144              Plains   25.0\n","48       Militia Bugler    3.0\n","75           Fan Bearer    2.0\n","141      Luminous Bonds    2.0\n","131      Knightly Valor    2.0\n","103     Bright Reprisal    2.0\n","101    Call the Cavalry    2.0\n","82         Mesa Unicorn    2.0\n","85          Serra Angel    2.0\n","58      Pegasus Courser    2.0\n","38      Gallant Cavalry    2.0\n","28       Dwarven Priest    2.0\n","78    Inspiring Captain    1.0\n","73    Everdawn Champion    1.0\n","3    Mentor of the Meek    1.0\n","88     Subjugator Angel    1.0\n","91       Cleansing Nova    1.0\n","68     Aerial Responder    1.0\n","105     Inspired Charge    1.0\n","116     Always Watching    1.0\n","121  Hieromancer's Cage    1.0\n","18       Valiant Knight    1.0\n","147      Militant Angel    1.0\n","0      Benalish Marshal    1.0\n"]}],"source":["#6)We simplify the display to only include card names and how many copies of each\n","\n","# Select only 'name' and 'count' columns\n","filtered_data = data[['name', 'count']].dropna(subset=['count'])  # Filter dataset\n","\n","# Sort the DataFrame by 'count' in descending order (highest count first)\n","sorted_data = filtered_data.sort_values(by='count', ascending=False)\n","\n","# Print the newly sorted DataFrame (with only 'name' and 'count' columns)\n","print(sorted_data)\n"]},{"cell_type":"code","execution_count":7,"id":"a17a3a4e","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:34:51.256749Z","iopub.status.busy":"2024-07-03T08:34:51.256328Z","iopub.status.idle":"2024-07-03T08:34:51.521889Z","shell.execute_reply":"2024-07-03T08:34:51.520303Z"},"papermill":{"duration":0.276674,"end_time":"2024-07-03T08:34:51.52484","exception":false,"start_time":"2024-07-03T08:34:51.248166","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["card type breakdown in this deck:\n"]},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["                   name  count  cardType\n","0      Benalish Marshal    1.0  Creature\n","3    Mentor of the Meek    1.0  Creature\n","18       Valiant Knight    1.0  Creature\n","28       Dwarven Priest    2.0  Creature\n","38      Gallant Cavalry    2.0  Creature\n","48       Militia Bugler    3.0  Creature\n","58      Pegasus Courser    2.0  Creature\n","68     Aerial Responder    1.0  Creature\n","73    Everdawn Champion    1.0  Creature\n","75           Fan Bearer    2.0  Creature\n","78    Inspiring Captain    1.0  Creature\n","82         Mesa Unicorn    2.0  Creature\n","85          Serra Angel    2.0  Creature\n","88     Subjugator Angel    1.0  Creature\n","91       Cleansing Nova    1.0   Sorcery\n","101    Call the Cavalry    2.0   Sorcery\n","103     Bright Reprisal    2.0   Instant\n","105     Inspired Charge    1.0   Instant\n","116     Always Watching    1.0  Creature\n","121  Hieromancer's Cage    1.0  Creature\n","131      Knightly Valor    2.0  Creature\n","141      Luminous Bonds    2.0  Creature\n","144              Plains   25.0      Land\n","147      Militant Angel    1.0  Creature\n","148                 NaN   60.0  Creature\n","----------\n","[89. 25.  3.  3.]\n","----------\n","cardType\n","Creature    89.0\n","Instant      3.0\n","Land        25.0\n","Sorcery      3.0\n","Name: count, dtype: float64\n"]}],"source":["#7)We simplify the card types, create a plot showing their distribution, and a refreshed data view scheme with only names and card types\n","\n","# Define a function to categorize card types\n","def categorize_card_type(row):\n","  card_type = row['type']\n","  if card_type in ['Sorcery', 'Instant']:\n","    return card_type\n","  elif card_type == 'Basic Land — Plains':\n","    return 'Land'\n","  else:\n","    return 'Creature'\n","\n","# Create a new 'cardType' column based on type\n","data['cardType'] = data.apply(categorize_card_type, axis=1)\n","\n","# Create new columns for type counts and calculate totals\n","type_counts = data.groupby('cardType')['count'].sum()\n","\n","# Prepare data for the graph\n","type_counts_sorted = type_counts.sort_values(ascending=False)\n","card_types = type_counts_sorted.index.to_numpy()\n","type_counts_values = type_counts_sorted.to_numpy()\n","\n","# Create the graph\n","import matplotlib.pyplot as plt\n","\n","print(\"card type breakdown in this deck:\")\n","\n","plt.bar(card_types, type_counts_values)\n","plt.xlabel('Card Type')\n","plt.ylabel('Total Count')\n","plt.title('Card Type Distribution (Count)')\n","plt.show()\n","\n","# Re-filter our data set with only 'name', 'count', and 'cardType' columns\n","filtered_data = data[['name', 'count', 'cardType']].dropna(subset=['count'])  # Filter dataset\n","print(filtered_data)\n","print(\"----------\")\n","\n","# Show our graph in text form\n","print(type_counts_values)\n","print(\"----------\")\n","print(type_counts)\n"]},{"cell_type":"code","execution_count":8,"id":"e3ac4da1","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:34:51.541774Z","iopub.status.busy":"2024-07-03T08:34:51.541334Z","iopub.status.idle":"2024-07-03T08:34:51.549423Z","shell.execute_reply":"2024-07-03T08:34:51.548027Z"},"papermill":{"duration":0.019452,"end_time":"2024-07-03T08:34:51.552019","exception":false,"start_time":"2024-07-03T08:34:51.532567","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Unique Toughness Values:\n","[ 3. nan  2.  4.]\n"]}],"source":["#8)We display all the unique toughness values to see a survey of the cards' toughnesses (if they're creatures)\n","\n","# Get all unique toughness values\n","unique_toughness_values = data['toughness'].unique()\n","\n","# Print the unique toughness values\n","if unique_toughness_values.any():\n","  print(\"Unique Toughness Values:\")\n","  print(unique_toughness_values)\n","else:\n","  print(\"'toughness' column has no values\")\n"]},{"cell_type":"code","execution_count":9,"id":"e31952cb","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:34:51.569103Z","iopub.status.busy":"2024-07-03T08:34:51.568703Z","iopub.status.idle":"2024-07-03T08:34:51.764935Z","shell.execute_reply":"2024-07-03T08:34:51.763052Z"},"papermill":{"duration":0.209662,"end_time":"2024-07-03T08:34:51.769489","exception":false,"start_time":"2024-07-03T08:34:51.559827","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["#9)We create a pie chart showcasing the toughness value and how each value represents the overall deck's tankiness\n","\n","# Filter for creature cards\n","creature_data = data[data['cardType'] == 'Creature']\n","\n","# Get all unique toughness values within creature cards\n","unique_toughness_values = creature_data['toughness'].unique()\n","\n","# Create a dictionary to store toughness counts\n","toughness_counts = {}\n","for toughness in unique_toughness_values:\n","  # Filter creature data with this toughness\n","  filtered_data = creature_data[creature_data['toughness'] == toughness]\n","  # Count occurrences of this toughness value\n","  toughness_counts[toughness] = filtered_data['toughness'].count()\n","\n","# Otherwise, check if there aren't any toughness counts\n","if not toughness_counts:\n","  print(\"No unique toughness values found for creatures\")\n","else:\n","  # Prepare data for the pie chart\n","  toughness_labels = list(toughness_counts.keys())\n","  creature_counts = list(toughness_counts.values())\n","\n","  # Create the pie chart\n","  import matplotlib.pyplot as plt\n","\n","  plt.pie(creature_counts, labels=toughness_labels, autopct='%1.1f%%')\n","  plt.title('Creature Count Distribution by Toughness')\n","  plt.show()\n"]},{"cell_type":"code","execution_count":10,"id":"0dfc764a","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:34:51.808892Z","iopub.status.busy":"2024-07-03T08:34:51.807336Z","iopub.status.idle":"2024-07-03T08:34:51.816865Z","shell.execute_reply":"2024-07-03T08:34:51.815735Z"},"papermill":{"duration":0.031778,"end_time":"2024-07-03T08:34:51.819719","exception":false,"start_time":"2024-07-03T08:34:51.787941","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Subjugator Angel = 6.0\n","Serra Angel = 5.0\n","Knightly Valor = 5.0\n","Bright Reprisal = 5.0\n","Cleansing Nova = 5.0\n"]}],"source":["#10)We print the top 5 highest mana values\n","\n","# Sort by 'manaValue' descending (highest first) and select top 5 rows\n","top_5_highest_mana = data.sort_values(by='manaValue', ascending=False).head(5)\n","\n","# Loop through the top 5\n","for index, row in top_5_highest_mana.iterrows():\n","  card_name = row['name']\n","  mana_value = row['manaValue']\n","  # Print the name and mana value in the desired format\n","  print(f\"{card_name} = {mana_value}\")\n"]},{"cell_type":"code","execution_count":11,"id":"97acb2d5","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:34:51.839475Z","iopub.status.busy":"2024-07-03T08:34:51.838614Z","iopub.status.idle":"2024-07-03T08:34:51.848744Z","shell.execute_reply":"2024-07-03T08:34:51.847731Z"},"papermill":{"duration":0.023459,"end_time":"2024-07-03T08:34:51.851776","exception":false,"start_time":"2024-07-03T08:34:51.828317","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Plains = 0.0\n","Fan Bearer = 1.0\n","Mesa Unicorn = 2.0\n","Luminous Bonds = 3.0\n","Always Watching = 3.0\n","Everdawn Champion = 3.0\n","Aerial Responder = 3.0\n","Benalish Marshal = 3.0\n","Militia Bugler = 3.0\n","Mentor of the Meek = 3.0\n"]}],"source":["#11)We print the top 10 *lowest* mana value cards\n","\n","# Sort by 'manaValue' ascending (lowest first) and select top 10 rows\n","top_ten_lowest_mana = data.sort_values(by='manaValue', ascending=True).head(10) # For GNT red deck, expecting until one 3-costed card)\n","\n","# Loop through the top 10\n","for index, row in top_ten_lowest_mana.iterrows():\n","  card_name = row['name']\n","  mana_value = row['manaValue']\n","  # Print the name and mana value in the desired format\n","  print(f\"{card_name} = {mana_value}\")\n"]},{"cell_type":"code","execution_count":12,"id":"8a1d694f","metadata":{"execution":{"iopub.execute_input":"2024-07-03T08:34:51.870523Z","iopub.status.busy":"2024-07-03T08:34:51.870069Z","iopub.status.idle":"2024-07-03T08:34:51.881954Z","shell.execute_reply":"2024-07-03T08:34:51.880605Z"},"papermill":{"duration":0.024418,"end_time":"2024-07-03T08:34:51.88447","exception":false,"start_time":"2024-07-03T08:34:51.860052","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["\"\\n# Filter for creature cards (assuming 'cardType' is the card type column)\\ncreature_data = data[data['cardType'] == 'Creature']\\n\\n# Prepare data for the scatter plot (round power and toughness)\\ncreature_power = creature_data['power'].astype(int).to_numpy()\\ncreature_toughness = creature_data['toughness'].astype(int).to_numpy()\\n\\n# Sort together by power and toughness (primary and secondary sort)\\nsorted_data = np.array([creature_power, creature_toughness, creature_data['name']]).T\\nsorted_data = sorted_data[sorted_data[:, 0].argsort(kind='mergesort')]  # Stable sort\\nsorted_data = sorted_data[sorted_data[:, 1].argsort(kind='mergesort')]  # Secondary sort\\n\\ncreature_power = sorted_data[:, 0]\\ncreature_toughness = sorted_data[:, 1]\\ncreature_names = sorted_data[:, 2]\\n\\n# Import our plotting library\\nimport matplotlib.pyplot as plt\\n\\n# Create the scatter plot\\nfig, ax = plt.subplots()\\np = ax.scatter(creature_power, creature_toughness)\\n\\n# Set labels and title with integer formatting\\nplt.xlabel('Power (Integer)')\\nplt.ylabel('Toughness (Integer)')\\nplt.title('Creature Power vs. Toughness')\\n\\n# Keep track of previous data point for label placement\\nprev_power = None\\nprev_toughness = None\\nlabel_offset = 0.1  # Vertical offset for labels\\n\\nfor i, (name, power, toughness) in enumerate(zip(creature_names, creature_power, creature_toughness)):\\n  # Check if current point has same power and toughness as previous\\n  if prev_power == power and prev_toughness == toughness:\\n    label_offset += 0.1  # Increase offset for consecutive labels\\n  else:\\n    label_offset = 0.1  # Reset offset for new group\\n\\n  # Place text label with adjusted offset\\n  plt.text(power, toughness + label_offset, name, ha='center', va='bottom', fontsize=8)\\n\\n  # Update previous values for comparison\\n  prev_power = power\\n  prev_toughness = toughness\\n\\n# Set whole number ticks on both axes\\nplt.xticks(range(min(creature_power), max(creature_power) + 1))  # Include max value\\nplt.yticks(range(min(creature_toughness), max(creature_toughness) + 1))\\n\\n# Adjust plot layout to avoid overlapping text labels\\nplt.tight_layout()\\n\\n# Show the plot\\nplt.show()\\n\""]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["#12)We make a scatter plot to see the power-to-toughness ratio of the cards in this deck\n","#--This should show us how the spread of and general overlook at creatures' offensive and defensive capabilities\n","'''\n","# Filter for creature cards (assuming 'cardType' is the card type column)\n","creature_data = data[data['cardType'] == 'Creature']\n","\n","# Prepare data for the scatter plot (round power and toughness)\n","creature_power = creature_data['power'].astype(int).to_numpy()\n","creature_toughness = creature_data['toughness'].astype(int).to_numpy()\n","\n","# Sort together by power and toughness (primary and secondary sort)\n","sorted_data = np.array([creature_power, creature_toughness, creature_data['name']]).T\n","sorted_data = sorted_data[sorted_data[:, 0].argsort(kind='mergesort')]  # Stable sort\n","sorted_data = sorted_data[sorted_data[:, 1].argsort(kind='mergesort')]  # Secondary sort\n","\n","creature_power = sorted_data[:, 0]\n","creature_toughness = sorted_data[:, 1]\n","creature_names = sorted_data[:, 2]\n","\n","# Import our plotting library\n","import matplotlib.pyplot as plt\n","\n","# Create the scatter plot\n","fig, ax = plt.subplots()\n","p = ax.scatter(creature_power, creature_toughness)\n","\n","# Set labels and title with integer formatting\n","plt.xlabel('Power (Integer)')\n","plt.ylabel('Toughness (Integer)')\n","plt.title('Creature Power vs. Toughness')\n","\n","# Keep track of previous data point for label placement\n","prev_power = None\n","prev_toughness = None\n","label_offset = 0.1  # Vertical offset for labels\n","\n","for i, (name, power, toughness) in enumerate(zip(creature_names, creature_power, creature_toughness)):\n","  # Check if current point has same power and toughness as previous\n","  if prev_power == power and prev_toughness == toughness:\n","    label_offset += 0.1  # Increase offset for consecutive labels\n","  else:\n","    label_offset = 0.1  # Reset offset for new group\n","\n","  # Place text label with adjusted offset\n","  plt.text(power, toughness + label_offset, name, ha='center', va='bottom', fontsize=8)\n","\n","  # Update previous values for comparison\n","  prev_power = power\n","  prev_toughness = toughness\n","\n","# Set whole number ticks on both axes\n","plt.xticks(range(min(creature_power), max(creature_power) + 1))  # Include max value\n","plt.yticks(range(min(creature_toughness), max(creature_toughness) + 1))\n","\n","# Adjust plot layout to avoid overlapping text labels\n","plt.tight_layout()\n","\n","# Show the plot\n","plt.show()\n","'''\n","#As we can see, the power-to-toughness progression is nearly linear."]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":5316403,"sourceId":8834762,"sourceType":"datasetVersion"}],"dockerImageVersionId":30732,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":6.036823,"end_time":"2024-07-03T08:34:52.413796","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-07-03T08:34:46.376973","version":"2.5.0"}},"nbformat":4,"nbformat_minor":5}